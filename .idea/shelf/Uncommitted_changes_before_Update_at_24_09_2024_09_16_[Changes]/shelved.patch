Index: src/com/BatiCouisine/controller/ProjectController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.BatiCouisine.controller;\r\n\r\nimport com.BatiCouisine.entities.EtatProject;\r\nimport com.BatiCouisine.entities.Projet;\r\nimport com.BatiCouisine.service.ProjectService;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class ProjectController {\r\n    private ProjectService projectService;\r\n\r\n\r\n\r\n    public ProjectController(ProjectService projectService) {\r\n        this.projectService = projectService;\r\n    }\r\n\r\n    public Projet store(int idClient) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(\"Entrer le nom du projet : \");\r\n        String nom = scanner.nextLine();\r\n        System.out.println(\"Entrer la surface de la cuisine : \");\r\n        double surfaceCuisine = scanner.nextDouble();\r\n        Projet projet = new Projet(0, nom, 0, 0, EtatProject.EN_COURS, surfaceCuisine);\r\n        int idProjet = projectService.store(projet, idClient);\r\n        projet.setId(idProjet);\r\n        return projet;\r\n    }\r\n\r\n    public void findById(int id) {\r\n        projectService.findById(id);\r\n    }\r\n\r\n    public void update(int id, Projet projet) {\r\n        projectService.update(id, projet);\r\n    }\r\n\r\n    public void destroy(int id) {\r\n        projectService.destroy(id);\r\n    }\r\n\r\n//    public void findAll() {\r\n//        projectService.findAll();\r\n//    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/BatiCouisine/controller/ProjectController.java b/src/com/BatiCouisine/controller/ProjectController.java
--- a/src/com/BatiCouisine/controller/ProjectController.java	(revision c2a638896e9dc741a03e61cc6a6621a591c3f867)
+++ b/src/com/BatiCouisine/controller/ProjectController.java	(date 1727163863214)
@@ -4,6 +4,7 @@
 import com.BatiCouisine.entities.Projet;
 import com.BatiCouisine.service.ProjectService;
 
+import java.util.HashMap;
 import java.util.Scanner;
 
 public class ProjectController {
@@ -39,8 +40,18 @@
         projectService.destroy(id);
     }
 
-//    public void findAll() {
-//        projectService.findAll();
-//    }
+    public void findAll() {
+        HashMap<String, Projet>  projetHashMap= projectService.retrieveAll();
+        for (Projet projet : projetHashMap.values()) {
+            System.out.println("_________________________________________________________" +
+                    "\nId : " + projet.getId() +
+                    "\nNom : " + projet.getNom() +
+                    "\nMarge bénéficiaire : " + projet.getMargeBeneficiaire() +
+                    "\nCout total : " + projet.getCoutTotal() +
+                    "\nEtat : " + projet.getEtat() +
+                    "\nSurface cuisine : " + projet.getSurfaceCouisine() +
+                    "\n_________________________________________________________");
+        }
+    }
 
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"d3ee1ae8-466f-46ef-bedf-c5c57a7291e8\" name=\"Changes\" comment=\"git commit &quot;Rename and implement entities; add ProjectEnum with implementation&#10;            &#10;            - Renamed entities to follow naming conventions&#10;            - Implemented entity classes with initial fields and methods&#10;            - Added ProjectEnum to represent project statuses&#10;            - Implemented ProjectEnum with necessary methods&#10;            &#10;            This commit refactors the entity names, completes the implementation of the entity classes, and introduces the ProjectEnum to handle project statuses. The implementation of ProjectEnum includes methods to manage and utilize the enum values effectively&quot;\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"develop\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;IBNESSAYEH&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/IBNESSAYEH/BatiCouisine.git&quot;,\r\n    &quot;accountId&quot;: &quot;814d314b-91cc-44c3-bfa9-af6cf6cc5a52&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2mRbbq2Pyao3TUygAZhJBib9OmD\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Application.Main.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main-menu&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.20224.419\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-410509235cf1-JavaScript-IU-242.20224.419\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"d3ee1ae8-466f-46ef-bedf-c5c57a7291e8\" name=\"Changes\" comment=\"git commit &quot;Rename and implement entities; add ProjectEnum with implementation&#10;            &#10;            - Renamed entities to follow naming conventions&#10;            - Implemented entity classes with initial fields and methods&#10;            - Added ProjectEnum to represent project statuses&#10;            - Implemented ProjectEnum with necessary methods&#10;            &#10;            This commit refactors the entity names, completes the implementation of the entity classes, and introduces the ProjectEnum to handle project statuses. The implementation of ProjectEnum includes methods to manage and utilize the enum values effectively&quot;\" />\r\n      <created>1727042412880</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1727042412880</updated>\r\n      <workItem from=\"1727042414101\" duration=\"1097000\" />\r\n      <workItem from=\"1727043524096\" duration=\"11840000\" />\r\n      <workItem from=\"1727086061564\" duration=\"1659000\" />\r\n      <workItem from=\"1727087733129\" duration=\"14605000\" />\r\n      <workItem from=\"1727107951639\" duration=\"1143000\" />\r\n      <workItem from=\"1727127692155\" duration=\"620000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"git commit &quot;Rename and implement entities; add ProjectEnum with implementation&#10;            &#10;            - Renamed entities to follow naming conventions&#10;            - Implemented entity classes with initial fields and methods&#10;            - Added ProjectEnum to represent project statuses&#10;            - Implemented ProjectEnum with necessary methods&#10;            &#10;            This commit refactors the entity names, completes the implementation of the entity classes, and introduces the ProjectEnum to handle project statuses. The implementation of ProjectEnum includes methods to manage and utilize the enum values effectively&quot;\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"git commit &quot;Rename and implement entities; add ProjectEnum with implementation&#10;            &#10;            - Renamed entities to follow naming conventions&#10;            - Implemented entity classes with initial fields and methods&#10;            - Added ProjectEnum to represent project statuses&#10;            - Implemented ProjectEnum with necessary methods&#10;            &#10;            This commit refactors the entity names, completes the implementation of the entity classes, and introduces the ProjectEnum to handle project statuses. The implementation of ProjectEnum includes methods to manage and utilize the enum values effectively&quot;\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c2a638896e9dc741a03e61cc6a6621a591c3f867)
+++ b/.idea/workspace.xml	(date 1727165757535)
@@ -4,7 +4,21 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="d3ee1ae8-466f-46ef-bedf-c5c57a7291e8" name="Changes" comment="git commit &quot;Rename and implement entities; add ProjectEnum with implementation&#10;            &#10;            - Renamed entities to follow naming conventions&#10;            - Implemented entity classes with initial fields and methods&#10;            - Added ProjectEnum to represent project statuses&#10;            - Implemented ProjectEnum with necessary methods&#10;            &#10;            This commit refactors the entity names, completes the implementation of the entity classes, and introduces the ProjectEnum to handle project statuses. The implementation of ProjectEnum includes methods to manage and utilize the enum values effectively&quot;" />
+    <list default="true" id="7c5d91d9-179c-49d1-9412-1547d60288be" name="Changes" comment="git commit &quot;Rename and implement entities; add ProjectEnum with implementation&#10;            &#10;            - Renamed entities to follow naming conventions&#10;            - Implemented entity classes with initial fields and methods&#10;            - Added ProjectEnum to represent project statuses&#10;            - Implemented ProjectEnum with necessary methods&#10;            &#10;            This commit refactors the entity names, completes the implementation of the entity classes, and introduces the ProjectEnum to handle project statuses. The implementation of ProjectEnum includes methods to manage and utilize the enum values effectively&quot;">
+      <change afterPath="$PROJECT_DIR$/src/com/BatiCouisine/util/ValidationUtils.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/BatiCuisine/com/BatiCouisine/Main.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/BatiCuisine/com/BatiCouisine/Main.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/BatiCuisine/com/BatiCouisine/controller/ClientController.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/BatiCuisine/com/BatiCouisine/controller/ClientController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/BatiCuisine/com/BatiCouisine/controller/ProjectController.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/BatiCuisine/com/BatiCouisine/controller/ProjectController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/BatiCuisine/com/BatiCouisine/entities/EtatProject.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/BatiCuisine/com/BatiCouisine/entities/EtatProject.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/BatiCuisine/com/BatiCouisine/repository/implementation/ProjectRepositoryImp.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/BatiCuisine/com/BatiCouisine/repository/implementation/ProjectRepositoryImp.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/BatiCouisine/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/BatiCouisine/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/BatiCouisine/controller/ClientController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/BatiCouisine/controller/ClientController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/BatiCouisine/controller/ProjectController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/BatiCouisine/controller/ProjectController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/BatiCouisine/entities/EtatProject.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/BatiCouisine/entities/EtatProject.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/com/BatiCouisine/repository/implementation/ProjectRepositoryImp.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/BatiCouisine/repository/implementation/ProjectRepositoryImp.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -51,14 +65,26 @@
   &quot;keyToString&quot;: {
     &quot;Application.Main.executor&quot;: &quot;Run&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;main-menu&quot;,
-    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;Merging main-menu&quot;,
     &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/Youcode/Downloads/maven-common-artifact-filters-3.0.1.jar&quot;,
     &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
     &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
     &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
     &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;onboarding.tips.debug.path&quot;: &quot;C:/Users/Youcode/IdeaProjects/BatiCuisine/src/Main.java&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Libraries&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
     &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  },
+  &quot;keyToStringList&quot;: {
+    &quot;DatabaseDriversLRU&quot;: [
+      &quot;postgresql&quot;
+    ]
   }
 }</component>
   <component name="SharedIndexes">
@@ -72,25 +98,35 @@
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
-      <changelist id="d3ee1ae8-466f-46ef-bedf-c5c57a7291e8" name="Changes" comment="git commit &quot;Rename and implement entities; add ProjectEnum with implementation&#10;            &#10;            - Renamed entities to follow naming conventions&#10;            - Implemented entity classes with initial fields and methods&#10;            - Added ProjectEnum to represent project statuses&#10;            - Implemented ProjectEnum with necessary methods&#10;            &#10;            This commit refactors the entity names, completes the implementation of the entity classes, and introduces the ProjectEnum to handle project statuses. The implementation of ProjectEnum includes methods to manage and utilize the enum values effectively&quot;" />
+      <changelist id="7c5d91d9-179c-49d1-9412-1547d60288be" name="Changes" comment="git commit &quot;Rename and implement entities; add ProjectEnum with implementation&#10;            &#10;            - Renamed entities to follow naming conventions&#10;            - Implemented entity classes with initial fields and methods&#10;            - Added ProjectEnum to represent project statuses&#10;            - Implemented ProjectEnum with necessary methods&#10;            &#10;            This commit refactors the entity names, completes the implementation of the entity classes, and introduces the ProjectEnum to handle project statuses. The implementation of ProjectEnum includes methods to manage and utilize the enum values effectively&quot;" />
       <created>1727042412880</created>
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
-      <updated>1727042412880</updated>
-      <workItem from="1727042414101" duration="1097000" />
-      <workItem from="1727043524096" duration="11840000" />
-      <workItem from="1727086061564" duration="1659000" />
-      <workItem from="1727087733129" duration="14605000" />
-      <workItem from="1727107951639" duration="1143000" />
-      <workItem from="1727127692155" duration="620000" />
+      <updated>1726512257074</updated>
+      <workItem from="1726512258167" duration="7737000" />
+      <workItem from="1726672685773" duration="581000" />
+      <workItem from="1726752290287" duration="5549000" />
+      <workItem from="1726783103339" duration="3248000" />
+      <workItem from="1726939072817" duration="515000" />
+      <workItem from="1727162285091" duration="3010000" />
     </task>
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="git commit &quot;Rename and implement entities; add ProjectEnum with implementation&#10;            &#10;            - Renamed entities to follow naming conventions&#10;            - Implemented entity classes with initial fields and methods&#10;            - Added ProjectEnum to represent project statuses&#10;            - Implemented ProjectEnum with necessary methods&#10;            &#10;            This commit refactors the entity names, completes the implementation of the entity classes, and introduces the ProjectEnum to handle project statuses. The implementation of ProjectEnum includes methods to manage and utilize the enum values effectively&quot;" />
-    <option name="LAST_COMMIT_MESSAGE" value="git commit &quot;Rename and implement entities; add ProjectEnum with implementation&#10;            &#10;            - Renamed entities to follow naming conventions&#10;            - Implemented entity classes with initial fields and methods&#10;            - Added ProjectEnum to represent project statuses&#10;            - Implemented ProjectEnum with necessary methods&#10;            &#10;            This commit refactors the entity names, completes the implementation of the entity classes, and introduces the ProjectEnum to handle project statuses. The implementation of ProjectEnum includes methods to manage and utilize the enum values effectively&quot;" />
   </component>
 </project>
\ No newline at end of file
Index: src/com/BatiCouisine/repository/implementation/ProjectRepositoryImp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.BatiCouisine.repository.implementation;\r\n\r\nimport com.BatiCouisine.entities.EtatProject;\r\nimport com.BatiCouisine.entities.Projet;\r\nimport com.BatiCouisine.repository.ProjectRepository;\r\nimport com.BatiCouisine.util.DBConnection;\r\nimport com.BatiCouisine.util.DBUtils;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\npublic class ProjectRepositoryImp implements ProjectRepository {\r\n    private Connection connection;\r\n\r\n    public ProjectRepositoryImp() {\r\n        this.connection = DBConnection.getConnectionInstance().getConnection();\r\n    }\r\n\r\n    public int store(Projet project, int idClient) {\r\n        String sqlQuery = \"INSERT INTO projet (nom, margebeneficiaire, couttotal, etat, surfacecouisine, id_client) VALUES (?, ?, ?,  ?::etatprojet, ?, ?)\";\r\n        PreparedStatement preparedStatement = null;\r\n        ResultSet generatedKey = null;\r\n\r\n        try {\r\n            preparedStatement = connection.prepareStatement(sqlQuery, preparedStatement.RETURN_GENERATED_KEYS);\r\n            preparedStatement.setString(1, project.getNom());\r\n            preparedStatement.setDouble(2, project.getMargeBeneficiaire());\r\n            preparedStatement.setDouble(3, project.getCoutTotal());\r\n            preparedStatement.setString(4, project.getEtat().toString());\r\n            preparedStatement.setDouble(5, project.getSurfaceCouisine());\r\n            preparedStatement.setInt(6, idClient);\r\n            int affectedRow = preparedStatement.executeUpdate();\r\n            if (affectedRow == 0) {\r\n                throw new Exception(\"Erreur lors de l'insertion du projet\");\r\n            }\r\n            generatedKey = preparedStatement.getGeneratedKeys();\r\n            if (generatedKey.next()) {\r\n                project.setId(generatedKey.getInt(1));\r\n\r\n            } else {\r\n                throw new Exception(\"Erreur lors de l'insertion du projet\");\r\n            }\r\n            System.out.println(\"Le projet a été créé avec succès\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }finally {\r\n            DBUtils.closeResources(generatedKey, preparedStatement);\r\n        }\r\n        return project.getId();\r\n    }\r\n\r\n\r\n    public void update(int id, Projet project) {\r\n        String sqlQuery = \"UPDATE projet SET nom = ?, margebeneficiaire = ?, couttotal = ?, etat = ?::etatprojet, surfacecouisine = ? WHERE id = ?\";\r\n        PreparedStatement preparedStatement = null;\r\n\r\n        try {\r\n            preparedStatement = connection.prepareStatement(sqlQuery);\r\n            preparedStatement.setString(1, project.getNom());\r\n            preparedStatement.setDouble(2, project.getMargeBeneficiaire());\r\n            preparedStatement.setDouble(3, project.getCoutTotal());\r\n            preparedStatement.setString(4, project.getEtat().toString());\r\n            preparedStatement.setDouble(5, project.getSurfaceCouisine());\r\n            preparedStatement.setInt(6, id);\r\n            int affectedRow = preparedStatement.executeUpdate();\r\n            if (affectedRow == 0) {\r\n                throw new Exception(\"Erreur lors de la mise à jour du projet\");\r\n            }\r\n            System.out.println(\"Le projet a été mis à jour avec succès\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }finally {\r\n            DBUtils.closeResources(null, preparedStatement);\r\n        }\r\n    }\r\n\r\n    public void destroy(int id) {\r\n        String sqlQuery = \"DELETE FROM project WHERE id = ?\";\r\n        PreparedStatement preparedStatement = null;\r\n\r\n        try {\r\n            preparedStatement = connection.prepareStatement(sqlQuery);\r\n            preparedStatement.setInt(1, id);\r\n            int affectedRow = preparedStatement.executeUpdate();\r\n            if (affectedRow == 0) {\r\n                throw new Exception(\"Erreur lors de la suppression du projet\");\r\n            }\r\n            System.out.println(\"Le projet a été supprimé avec succès\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }finally {\r\n            DBUtils.closeResources(null, preparedStatement);\r\n        }\r\n    }\r\n\r\n    public Optional<Projet> findById(int id) {\r\n        String sqlQuery = \"SELECT * FROM project WHERE id = ?\";\r\n        PreparedStatement preparedStatement = null;\r\n        ResultSet resultSet = null;\r\n        Optional<Projet> projectOptional = Optional.empty();\r\n\r\n        try {\r\n            preparedStatement = connection.prepareStatement(sqlQuery);\r\n            preparedStatement.setInt(1, id);\r\n            resultSet = preparedStatement.executeQuery();\r\n            if (resultSet.next()) {\r\n                Projet project = new Projet();\r\n                project.setId(id);\r\n                project.setNom(resultSet.getString(\"nom\"));\r\n                project.setMargeBeneficiaire(resultSet.getDouble(\"margebeneficiaire\"));\r\n                project.setCoutTotal(resultSet.getDouble(\"couttotal\"));\r\n                project.setEtat(EtatProject.valueOf(resultSet.getString(\"etat\")));\r\n                project.setSurfaceCouisine(resultSet.getDouble(\"surfacecouisine\"));\r\n                projectOptional = Optional.ofNullable(project);\r\n            } else {\r\n                System.out.println(\"Aucun projet trouvé avec cet id\");\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            DBUtils.closeResources(resultSet, preparedStatement);\r\n        }\r\n\r\n        return projectOptional;\r\n\r\n    }\r\n\r\n\r\n    public HashMap<String, Projet> retrieveAll() {\r\n        String sqlQuery = \"SELECT * FROM project\";\r\n        PreparedStatement preparedStatement = null;\r\n        ResultSet resultSet = null;\r\n        HashMap<String, Projet> projects = new HashMap<>();\r\n        try {\r\n            preparedStatement = connection.prepareStatement(sqlQuery);\r\n            resultSet = preparedStatement.executeQuery();\r\n            while (resultSet.next()) {\r\n                Projet project = new Projet();\r\n                project.setId(resultSet.getInt(\"id\"));\r\n                project.setNom(resultSet.getString(\"nom\"));\r\n                project.setMargeBeneficiaire(resultSet.getDouble(\"margebeneficiaire\"));\r\n                project.setCoutTotal(resultSet.getDouble(\"couttotal\"));\r\n                project.setEtat(EtatProject.valueOf(resultSet.getString(\"etat\")));\r\n                project.setSurfaceCouisine(resultSet.getDouble(\"surfacecouisine\"));\r\n                projects.put(resultSet.getString(\"nom\"), project);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            DBUtils.closeResources(resultSet, preparedStatement);\r\n        }\r\n        return projects;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/BatiCouisine/repository/implementation/ProjectRepositoryImp.java b/src/com/BatiCouisine/repository/implementation/ProjectRepositoryImp.java
--- a/src/com/BatiCouisine/repository/implementation/ProjectRepositoryImp.java	(revision c2a638896e9dc741a03e61cc6a6621a591c3f867)
+++ b/src/com/BatiCouisine/repository/implementation/ProjectRepositoryImp.java	(date 1727163752117)
@@ -131,7 +131,7 @@
 
 
     public HashMap<String, Projet> retrieveAll() {
-        String sqlQuery = "SELECT * FROM project";
+        String sqlQuery = "SELECT * FROM projet";
         PreparedStatement preparedStatement = null;
         ResultSet resultSet = null;
         HashMap<String, Projet> projects = new HashMap<>();
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>### IntelliJ IDEA ###\r\nout/\r\n!**/src/main/**/out/\r\n!**/src/test/**/out/\r\n\r\n### Eclipse ###\r\n.apt_generated\r\n.classpath\r\n.factorypath\r\n.project\r\n.settings\r\n.springBeans\r\n.sts4-cache\r\nbin/\r\n!**/src/main/**/bin/\r\n!**/src/test/**/bin/\r\n\r\n### NetBeans ###\r\n/nbproject/private/\r\n/nbbuild/\r\n/dist/\r\n/nbdist/\r\n/.nb-gradle/\r\n\r\n### VS Code ###\r\n.vscode/\r\n\r\n### Mac OS ###\r\n.DS_Store\r\n\r\n\r\n\r\n.idea/workspace.xml
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision c2a638896e9dc741a03e61cc6a6621a591c3f867)
+++ b/.gitignore	(date 1727165751576)
@@ -30,4 +30,4 @@
 
 
 
-.idea/workspace.xml
\ No newline at end of file
+.idea
\ No newline at end of file
Index: src/com/BatiCouisine/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.BatiCouisine;\r\n\r\nimport com.BatiCouisine.controller.*;\r\nimport com.BatiCouisine.entities.*;\r\nimport com.BatiCouisine.repository.*;\r\nimport com.BatiCouisine.repository.implementation.*;\r\nimport com.BatiCouisine.service.*;\r\nimport com.BatiCouisine.service.Implementation.*;\r\nimport com.BatiCouisine.util.DBUtils;\r\n\r\nimport java.util.*;\r\n\r\nimport static com.BatiCouisine.util.DBUtils.validateAndGetDate;\r\n\r\npublic class Main {\r\n\r\n    private static Projet projet = new Projet();\r\n    private static MainDoeuvre mainDoeuvre = new MainDoeuvre();\r\n    private static Materiau materiau = new Materiau();\r\n    private static Devis devis = new Devis();\r\n    private static Client client = new Client();\r\n\r\n    private static List<MainDoeuvre> MainDoeuvreList = new ArrayList<>();;\r\n    private static List<Materiau> MateriauList = new ArrayList<>();;\r\n\r\n    private static double pourcentageMargeBeneficiaire = 0.0;\r\n    private static double pourcentageTVA = 0.0;\r\n\r\n\r\n    public static void main(String[] args) {\r\n        ClientController clientController = initializeClientController();\r\n        ProjectController projectController = initializeProjectController();\r\n        MateriauController materiauController = initializeMateriauController();\r\n        MainDOeuvreController mainDoeuvreController = initializeMainDOeuvreController();\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n        int choix;\r\n\r\n        System.out.println(\"=== Bienvenue dans l'application de gestion des projets de rénovation de cuisines ===\");\r\n\r\n        do {\r\n            mainMenu();\r\n            System.out.println(\">>>>>>   Veuillez choisir une option:   <<<<<<\");\r\n            choix = scanner.nextInt();\r\n            scanner.nextLine();\r\n\r\n            switch (choix) {\r\n                case 1:\r\n                    handleNewProjectCreation(clientController, projectController, materiauController, mainDoeuvreController, scanner);\r\n                    break;\r\n                case 2:\r\n                    System.out.println(\"Affichage des projets existants\");\r\n                    break;\r\n                case 3:\r\n                    System.out.println(\"Calcul du coût d'un projet\");\r\n                    break;\r\n                case 4:\r\n                    System.out.println(\"Merci d'avoir utilisé notre application\");\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Veuillez choisir une option valide\");\r\n                    break;\r\n            }\r\n        } while (choix != 4);\r\n    }\r\n\r\n    private static void handleNewProjectCreation(ClientController clientController, ProjectController projectController,\r\n                                                 MateriauController materiauController, MainDOeuvreController mainDoeuvreController,\r\n                                                 Scanner scanner) {\r\n        Optional<Client> OptionalClient = clientController.index();\r\n        if (OptionalClient.isPresent() && OptionalClient.get().getId() != 0) {\r\n            System.out.println(\"Souhaitez-vous continuer avec ce client ? (y/n) : \");\r\n            if (scanner.nextLine().equalsIgnoreCase(\"y\")) {\r\n                projet  = projectController.store(OptionalClient.get().getId());\r\n                if (projet.getId() != 0) {\r\n                    handleMateriauCreation(materiauController, scanner, projet.getId());\r\n                    handleMainDoeuvreCreation(mainDoeuvreController, scanner, projet.getId());\r\n                    handleClaculCoutTotale(scanner, new MateriauServiceImp(new MateriauRepositoryImp()), new MainDoeuvreServiceImp(new MainDoeuvreRepositoryImp()));\r\n                    System.out.println(\"--- Résultat du Calcul ---\\n\" +\r\n                            \"Nom du projet : \" + projet.getNom() + \"\\n\" +\r\n                            \"Client : \" + OptionalClient.get().getNom() + \"\\n\" +\r\n                            \"Adresse du chantier : \" + OptionalClient.get().getAddress() + \"\\n\" +\r\n                            \"Surface : \" + projet.getSurfaceCouisine() + \" m²\\n\" +\r\n                            \"--- Détail des Coûts ---\");\r\n                    System.out.println(\"1. Matériaux :\");\r\n                    MateriauList.forEach(materiau -> {\r\n                        System.out.println(\"Nom : \" + materiau.getNom()   + calculateCoutTotalMateriau(materiau) +\" ( quantité : \" + materiau.getQuantite() + \" coutUnitaire : \" + materiau.getCoutUnitaire() + \" coutTransport : \" + materiau.getCoutTransport() + \" coefficientQualite : \" + materiau.getCoefficientQualite()  +\")\");\r\n                    });\r\n                    System.out.println(\"Coût total des matériaux avant TVA : \" + MateriauList.stream().mapToDouble(materiau -> calculateCoutTotalMateriau(materiau)).sum());\r\n                    System.out.println(\"Coût total des matériaux avec TVA (\" + pourcentageTVA + \"%) : \" + MateriauList.stream().mapToDouble(materiau -> materiau.getTauxTVA()).sum());\r\n\r\n                    System.out.println(\"2. Main d'œuvre :\");\r\n\r\n                    MainDoeuvreList.forEach(mainDoeuvre -> {\r\n                        System.out.println(\"Nom : \" + mainDoeuvre.getNom() + calculateCoutTotalMainDoeuvre(mainDoeuvre) + \" ( tauxHoraire : \" + mainDoeuvre.getTauxHoraire() + \" heurTravail : \" + mainDoeuvre.getHeurTravail() + \" productiviteOuvrier : \" + mainDoeuvre.getProductiviteOuvrier() + \")\");\r\n                    });\r\n                    System.out.println(\"Coût total de la main d'œuvre avant TVA : \" + MainDoeuvreList.stream().mapToDouble(mainDoeuvre -> calculateCoutTotalMainDoeuvre(mainDoeuvre)).sum());\r\n                    System.out.println(\"Coût total de la main d'œuvre avec TVA (\" + pourcentageTVA + \"%) : \" + MainDoeuvreList.stream().mapToDouble(mainDoeuvre -> mainDoeuvre.getTauxTVA()).sum());\r\n\r\n                    double totalCoutMateriau = MateriauList.stream().mapToDouble(materiau -> calculateCoutTotalMateriau(materiau)).sum();\r\n                    double totalCoutMainDoeuvre = MainDoeuvreList.stream().mapToDouble(mainDoeuvre -> calculateCoutTotalMainDoeuvre(mainDoeuvre)).sum();\r\n                    double totalCoutAvantMarge = totalCoutMateriau + totalCoutMainDoeuvre;\r\n                    double margeBeneficiaire = totalCoutAvantMarge * pourcentageMargeBeneficiaire;\r\n                    double totalCoutApresMarge = totalCoutAvantMarge + margeBeneficiaire;\r\n\r\n                    System.out.println(\"3. Coût total avant marge : \" + totalCoutAvantMarge);\r\n                    System.out.println(\"4. Marge bénéficiaire : \" + margeBeneficiaire);\r\n                    projet.setCoutTotal(totalCoutAvantMarge);\r\n                    projet.setMargeBeneficiaire(margeBeneficiaire);\r\n\r\n                    System.out.println(\"5. Coût total après marge : \" + totalCoutApresMarge);\r\n\r\n                    System.out.println(\"--- Enregistrement du Devis ---\");\r\n                    System.out.println(\"Entrez la date d'émission du devis (format : jj/mm/aaaa) : \");\r\n                    Date dateEmission =  DBUtils.validateAndGetDate(scanner.nextLine());\r\n                    System.out.println(\"Entrez la date de validité du devis (format : jj/mm/aaaa) : \");\r\n                    Date dateValidite =  DBUtils.validateAndGetDate(scanner.nextLine());\r\n\r\n                    System.out.println(\"Souhaitez-vous enregistrer le devis ? (y/n) : \");\r\n                    String choixEnregistrementDevis = scanner.nextLine();\r\n                    Devis devis = new Devis();\r\n                    devis.setDateMission(dateEmission);\r\n                    devis.setDateValidite(dateValidite);\r\n                    devis.setMontantEstime(totalCoutApresMarge);\r\n                    if (choixEnregistrementDevis.equalsIgnoreCase(\"y\")) {\r\n                        devis.setAccepted(true);\r\n                        projet.setEtat(EtatProject.EN_COURS);\r\n                        System.out.println(\"Devis enregistré avec succès !\");\r\n                    }else{\r\n                        projet.setEtat(EtatProject.ANNULER);\r\n                        devis.setAccepted(false);\r\n                    }\r\n                    projectController.update(projet.getId(), projet);\r\n                    DevisService devisService = new DevisServiceImp(new DevisRepositoryImp());\r\n                    devisService.store(devis, projet.getId());\r\n                } else {\r\n                    System.out.println(\"Vous avez choisi de ne pas continuer avec ce client\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void handleMateriauCreation(MateriauController materiauController, Scanner scanner, int idProjet) {\r\n        System.out.println(\"--- Ajout des matériaux ---\");\r\n        String choixContinuedCreation;\r\n        do {\r\n            materiau = materiauController.store(idProjet);\r\n            if (materiau.getId() != 0) {\r\n                System.out.println(\"Matériau ajouté avec succès !\");\r\n                System.out.println(\"Voulez-vous ajouter un autre matériau ? (y/n) : \");\r\n                MateriauList.add(materiau);\r\n                choixContinuedCreation = scanner.nextLine().toLowerCase();\r\n            } else {\r\n                choixContinuedCreation = \"n\";\r\n            }\r\n        } while (choixContinuedCreation.equals(\"y\"));\r\n    }\r\n\r\n    private static void handleMainDoeuvreCreation(MainDOeuvreController mainDoeuvreController, Scanner scanner, int idProjet) {\r\n        System.out.println(\"--- Ajout de la main d'œuvre ---\");\r\n        String choixContinuedCreation;\r\n        do {\r\n            mainDoeuvre = mainDoeuvreController.store(idProjet);\r\n            if (mainDoeuvre.getId() != 0) {\r\n                System.out.println(\"Main d'œuvre ajoutée avec succès !\");\r\n                MainDoeuvreList.add(mainDoeuvre);\r\n                System.out.println(\"Voulez-vous ajouter une autre main d'œuvre ? (y/n) : \");\r\n                choixContinuedCreation = scanner.nextLine().toLowerCase();\r\n            } else {\r\n                choixContinuedCreation = \"n\";\r\n            }\r\n        } while (choixContinuedCreation.equals(\"y\"));\r\n    }\r\n\r\n    private static void handleClaculCoutTotale(Scanner scanner, MateriauService materiauService, MainDoeuvreService mainDoeuvreService) {\r\n        System.out.println(\"--- Calcul du coût total ---\\n\");\r\n\r\n        System.out.println(\"Souhaitez-vous appliquer une TVA au projet ? (y/n) : \");\r\n        String choixApplicateTVA = scanner.nextLine();\r\n\r\n        if (choixApplicateTVA.equalsIgnoreCase(\"y\")) {\r\n            System.out.println(\"Entrez le pourcentage de TVA (%) : \");\r\n            pourcentageTVA = scanner.nextDouble();\r\n            scanner.nextLine();\r\n        }\r\n        System.out.println(\"Souhaitez-vous appliquerune marge bénéficiaire au projet ? (y/n) : y \");\r\n        String choixApplicateMargeBeneficiaire = scanner.nextLine();\r\n\r\n        if (choixApplicateMargeBeneficiaire.equalsIgnoreCase(\"y\")) {\r\n            System.out.println(\"Entrez le pourcentage de marge bénéficiaire (%) : \");\r\n            pourcentageMargeBeneficiaire = scanner.nextDouble();\r\n            scanner.nextLine();\r\n        }\r\n\r\n        System.out.println(\"Calcul du coût en cours...\\n\");\r\n\r\n        MateriauList.forEach(materiau -> {\r\n            double CoutTotalMateriau = calculateCoutTotalMateriau(materiau);\r\n            double TauxTVA = 0.0;\r\n            if(pourcentageTVA != 0.0) {\r\n                TauxTVA = CoutTotalMateriau + CoutTotalMateriau * pourcentageTVA / 100;\r\n                materiau.setTauxTVA(TauxTVA);\r\n                materiauService.update(materiau.getId(), materiau);\r\n            }\r\n\r\n        });\r\n        double coutTotalMateriaux = MateriauList.stream()\r\n                .mapToDouble(materiau -> materiau.getTauxTVA())\r\n                .sum();\r\n\r\n        MainDoeuvreList.forEach(mainDoeuvre -> {\r\n            double coutTotalMainDoeuvre = calculateCoutTotalMainDoeuvre(mainDoeuvre);\r\n            double TauxTVA = 0.0;\r\n            if(pourcentageTVA != 0.0) {\r\n                TauxTVA = coutTotalMainDoeuvre + coutTotalMainDoeuvre * pourcentageTVA / 100;\r\n                mainDoeuvre.setTauxTVA(TauxTVA);\r\n                mainDoeuvreService.update(mainDoeuvre.getId(), mainDoeuvre);\r\n            }\r\n            mainDoeuvre.setTauxTVA(coutTotalMainDoeuvre);\r\n        });\r\n\r\n    }\r\n\r\n    public static void mainMenu() {\r\n        System.out.println(\"==================================== Menu Principal =================================\\n\" +\r\n                \"1. Créer un nouveau projet :\\n\" +\r\n                \"2. Afficher les projets existants :\\n\" +\r\n                \"3. Calculer le coût d'un projet :\\n\" +\r\n                \"4. Quitter :\\n\" +\r\n                \"=====================================================================================\\n\");\r\n    }\r\n\r\n    private static ClientController initializeClientController() {\r\n        ClientRepository clientRepository = new ClientRepositoryImp();\r\n        ClientService clientService = new ClientServiceImp(clientRepository);\r\n        return new ClientController(clientService);\r\n    }\r\n\r\n    private static ProjectController initializeProjectController() {\r\n        ProjectRepositoryImp projectRepository = new ProjectRepositoryImp();\r\n        ProjectService projectService = new ProjectServiceImp(projectRepository);\r\n        return new ProjectController(projectService);\r\n    }\r\n\r\n    private static MateriauController initializeMateriauController() {\r\n        MateriauRepository materiauRepository = new MateriauRepositoryImp();\r\n        MateriauService materiauService = new MateriauServiceImp(materiauRepository);\r\n        return new MateriauController(materiauService);\r\n    }\r\n\r\n    private static MainDOeuvreController initializeMainDOeuvreController() {\r\n        MainDoeuvreRepository mainDoeuvreRepository = new MainDoeuvreRepositoryImp();\r\n        MainDoeuvreService mainDoeuvreService = new MainDoeuvreServiceImp(mainDoeuvreRepository);\r\n        return new MainDOeuvreController(mainDoeuvreService);\r\n    }\r\n\r\n    private static double calculateCoutTotalMateriau(Materiau materiau) {\r\n        double coutTotalMateriau = materiau.getCoutUnitaire() * materiau.getQuantite() * materiau.getCoefficientQualite() + materiau.getCoutTransport() ;\r\n        return coutTotalMateriau;\r\n    }\r\n\r\n    private static double calculateCoutTotalMainDoeuvre(MainDoeuvre mainDoeuvre) {\r\n        double coutTotalMainDoeuvre = mainDoeuvre.getTauxHoraire() * mainDoeuvre.getHeurTravail() * mainDoeuvre.getProductiviteOuvrier();\r\n        return coutTotalMainDoeuvre;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/BatiCouisine/Main.java b/src/com/BatiCouisine/Main.java
--- a/src/com/BatiCouisine/Main.java	(revision c2a638896e9dc741a03e61cc6a6621a591c3f867)
+++ b/src/com/BatiCouisine/Main.java	(date 1727163687044)
@@ -7,6 +7,7 @@
 import com.BatiCouisine.service.*;
 import com.BatiCouisine.service.Implementation.*;
 import com.BatiCouisine.util.DBUtils;
+import com.BatiCouisine.util.ValidationUtils;
 
 import java.util.*;
 
@@ -41,20 +42,18 @@
         do {
             mainMenu();
             System.out.println(">>>>>>   Veuillez choisir une option:   <<<<<<");
-            choix = scanner.nextInt();
-            scanner.nextLine();
+
+            choix = ValidationUtils.getValidInput(scanner);
+
 
             switch (choix) {
                 case 1:
                     handleNewProjectCreation(clientController, projectController, materiauController, mainDoeuvreController, scanner);
                     break;
-                case 2:
-                    System.out.println("Affichage des projets existants");
+                case 2: projectController.findAll();
+
                     break;
                 case 3:
-                    System.out.println("Calcul du coût d'un projet");
-                    break;
-                case 4:
                     System.out.println("Merci d'avoir utilisé notre application");
                     break;
                 default:
@@ -64,6 +63,14 @@
         } while (choix != 4);
     }
 
+    public static void mainMenu() {
+        System.out.println("==================================== Menu Principal =================================\n" +
+                "1. Créer un nouveau projet :\n" +
+                "2. Afficher les projets existants :\n" +
+                "3. Quitter :\n" +
+                "=====================================================================================\n");
+    }
+
     private static void handleNewProjectCreation(ClientController clientController, ProjectController projectController,
                                                  MateriauController materiauController, MainDOeuvreController mainDoeuvreController,
                                                  Scanner scanner) {
@@ -127,8 +134,9 @@
                         projet.setEtat(EtatProject.EN_COURS);
                         System.out.println("Devis enregistré avec succès !");
                     }else{
-                        projet.setEtat(EtatProject.ANNULER);
+                        projet.setEtat(EtatProject.ANNULE);
                         devis.setAccepted(false);
+                        System.out.println("Devis refusé !");
                     }
                     projectController.update(projet.getId(), projet);
                     DevisService devisService = new DevisServiceImp(new DevisRepositoryImp());
@@ -221,14 +229,7 @@
 
     }
 
-    public static void mainMenu() {
-        System.out.println("==================================== Menu Principal =================================\n" +
-                "1. Créer un nouveau projet :\n" +
-                "2. Afficher les projets existants :\n" +
-                "3. Calculer le coût d'un projet :\n" +
-                "4. Quitter :\n" +
-                "=====================================================================================\n");
-    }
+
 
     private static ClientController initializeClientController() {
         ClientRepository clientRepository = new ClientRepositoryImp();
Index: src/com/BatiCouisine/controller/ClientController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.BatiCouisine.controller;\r\n\r\nimport com.BatiCouisine.entities.Client;\r\nimport com.BatiCouisine.service.ClientService;\r\n\r\nimport java.util.Optional;\r\nimport java.util.Scanner;\r\n\r\npublic class ClientController {\r\n    private ClientService clientService;\r\n\r\n\r\n    public ClientController(ClientService clientService) {\r\n        this.clientService = clientService;\r\n    }\r\n\r\n    public Optional<Client> index() {\r\n        Scanner scanner = new Scanner(System.in);\r\n        int choix;\r\n        int idClient = 0;\r\n\r\n            menu();\r\n            choix = 0;\r\n        Optional<Client>  OptionalClient = null;\r\n\r\n            System.out.println(\"entrer votre choix :\");\r\n            choix = scanner.nextInt();\r\n            scanner.nextLine();\r\n            switch (choix) {\r\n                case 1:{\r\n                    OptionalClient= findByName();\r\n                    return OptionalClient;\r\n                }\r\n\r\n                case 2:{\r\n                    OptionalClient =  store(new Client());\r\n                   return OptionalClient;\r\n\r\n                }\r\n                default:\r\n                    System.out.println(\"Veuillez choisir une option valide\");\r\n                    break;\r\n            }\r\n\r\n\r\n        return OptionalClient;\r\n\r\n\r\n\r\n    }\r\n\r\n    public static void menu() {\r\n        System.out.println(\"========= premierment creer un nouveau client ou choisir un client existant =========\");\r\n        System.out.println(\"==================================== Menu client =================================\\n\" +\r\n                            \"1. chercher un client existant :\\n\" +\r\n                            \"2. Ajouter un nouveau client :\\n\" +\r\n                            \"Veuillez choisir une option: \\n\");\r\n    }\r\n\r\n    public Optional<Client> store(Client client) {\r\n        Optional<Client>  OptionalClient = Optional.ofNullable(client);\r\n        System.out.println(\"Entrez le nom du client : \");\r\n        Scanner scanner = new Scanner(System.in);\r\n        String nom = scanner.nextLine();\r\n        client.setNom(nom);\r\n        System.out.println(\"Entrez le numero de telephone du client : \");\r\n        String numeroTelephone = scanner.nextLine();\r\n        client.setNumeroTelephone(numeroTelephone);\r\n        System.out.println(\"Entrez l'adresse du client : \");\r\n        String address = scanner.nextLine();\r\n        client.setAddress(address);\r\n        System.out.println(\"Est-ce un client professionnel ? (true/false) : \");\r\n        boolean estProfessionnelle = scanner.nextBoolean();\r\n        client.setEstProfessionnelle(estProfessionnelle);\r\n        int idGenerated = clientService.store(client);\r\n        if(idGenerated != 0){\r\n            return OptionalClient;\r\n        }else{\r\n            System.out.println(\"Erreur lors de la creation du client vuillez creer le client de nouveau.\");\r\n            return OptionalClient;\r\n        }\r\n    }\r\n\r\n    public Optional<Client> findByName() {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(\"Entrez le nom du client : \");\r\n        String nomClient = scanner.nextLine();\r\n\r\n        Optional<Client> clientOptional= clientService.findByName(nomClient);\r\n        if(clientOptional.isPresent()){\r\n            System.out.println(\"Client trouver !\");\r\n            System.out.println(\"Nom du client : \" + clientOptional.get().getNom());\r\n            System.out.println(\"Numero de telephone : \" + clientOptional.get().getNumeroTelephone());\r\n            System.out.println(\"Adresse : \" + clientOptional.get().getAddress());\r\n            return clientOptional;\r\n        }else{\r\n            return clientOptional;\r\n        }\r\n\r\n    }\r\n\r\n    public void update(int id, Client client) {\r\n        clientService.update(id, client);\r\n    }\r\n\r\n    public void destroy(int id) {\r\n        clientService.destroy(id);\r\n    }\r\n\r\n    public void findAll() {\r\n        clientService.findAll();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/BatiCouisine/controller/ClientController.java b/src/com/BatiCouisine/controller/ClientController.java
--- a/src/com/BatiCouisine/controller/ClientController.java	(revision c2a638896e9dc741a03e61cc6a6621a591c3f867)
+++ b/src/com/BatiCouisine/controller/ClientController.java	(date 1727130851763)
@@ -2,6 +2,7 @@
 
 import com.BatiCouisine.entities.Client;
 import com.BatiCouisine.service.ClientService;
+import com.BatiCouisine.util.ValidationUtils;
 
 import java.util.Optional;
 import java.util.Scanner;
@@ -24,8 +25,7 @@
         Optional<Client>  OptionalClient = null;
 
             System.out.println("entrer votre choix :");
-            choix = scanner.nextInt();
-            scanner.nextLine();
+        choix = ValidationUtils.getValidInput(scanner);
             switch (choix) {
                 case 1:{
                     OptionalClient= findByName();
Index: src/com/BatiCouisine/entities/EtatProject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.BatiCouisine.entities;\r\n\r\npublic enum EtatProject {\r\n\r\n    EN_COURS,\r\n    TERMINER,\r\n    ANNULER\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/BatiCouisine/entities/EtatProject.java b/src/com/BatiCouisine/entities/EtatProject.java
--- a/src/com/BatiCouisine/entities/EtatProject.java	(revision c2a638896e9dc741a03e61cc6a6621a591c3f867)
+++ b/src/com/BatiCouisine/entities/EtatProject.java	(date 1727162496206)
@@ -4,5 +4,5 @@
 
     EN_COURS,
     TERMINER,
-    ANNULER
+    ANNULE
 }
Index: src/com/BatiCouisine/util/ValidationUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/BatiCouisine/util/ValidationUtils.java b/src/com/BatiCouisine/util/ValidationUtils.java
new file mode 100644
--- /dev/null	(date 1727130982762)
+++ b/src/com/BatiCouisine/util/ValidationUtils.java	(date 1727130982762)
@@ -0,0 +1,17 @@
+package com.BatiCouisine.util;
+
+import java.util.Scanner;
+
+public class ValidationUtils {
+
+    public static int getValidInput(Scanner input) {
+
+        while (!input.hasNextInt()) {
+            System.out.println("Invalid input. Please enter a number.");
+            input.next();
+        }
+        int choix = input.nextInt();
+        input.nextLine();
+        return choix;
+    }
+}
